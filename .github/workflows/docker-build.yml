name: Docker Build & Test

on:
  push:
    branches: [ main, develop, feature/* ]
    paths:
      - 'Dockerfile'
      - '.github/workflows/docker-build.yml'
      - 'apps/backend/**'
      - 'apps/frontend/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'Dockerfile'
      - '.github/workflows/docker-build.yml'
      - 'apps/backend/**'
      - 'apps/frontend/**'
      - 'package.json'
      - 'pnpm-lock.yaml'

jobs:
  # Frontend tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/iron'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false
      
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Cache pnpm modules
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run frontend tests
        run: pnpm test
  
  # Backend tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install backend dependencies
        run: |
          cd apps/backend
          pip install -e .
          pip install pytest pytest-cov httpx
      
      - name: Run backend tests
        run: |
          cd apps/backend
          python -m pytest tests/ -v
  
  # Docker build test
  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: building-os:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Verify image
        run: |
          # List built images
          docker images
          
          # Run container for basic validation
          container_id=$(docker run -d -p 8000:8000 -p 80:80 building-os:test)
          
          # Wait for container to start
          echo "Waiting for container to start..."
          sleep 30
          
          # Check if container is running
          docker ps
          
          # Check container logs
          docker logs $container_id
          
          # Check if backend API responds
          echo "Checking backend API..."
          curl -f http://localhost:8000/docs || { echo "Backend API check failed"; docker logs $container_id; exit 1; }
          
          # Check if frontend is accessible
          echo "Checking frontend..."
          curl -f -L http://localhost || { echo "Frontend check failed"; docker logs $container_id; exit 1; }
          
          # Stop and remove container
          docker stop $container_id
          docker rm $container_id
      
      - name: Show container logs if failed
        if: failure()
        run: |
          if [ ! -z "$container_id" ]; then
            echo "Container logs:"
            docker logs $container_id
          fi
  
  # Security scan
  security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    needs: docker-build-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '0'  # Don't fail build due to vulnerabilities
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
      
      - name: Run Hadolint Dockerfile check
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: true
      
      - name: Upload Hadolint results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: hadolint-results.sarif
          category: hadolint
  
  # Multi-platform test
  multi-platform-test:
    name: Multi-Platform Build Test
    runs-on: ubuntu-latest
    needs: docker-build-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Multi-platform build test
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          tags: building-os:multi-platform
          cache-from: type=gha
          cache-to: type=gha,mode=max 