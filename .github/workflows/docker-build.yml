name: Docker Build & Test

on:
  push:
    branches: [ main, develop, feature/* ]
    paths:
      - 'Dockerfile'
      - '.github/workflows/docker-build.yml'
      - 'apps/backend/**'
      - 'apps/frontend/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'Dockerfile'
      - '.github/workflows/docker-build.yml'
      - 'apps/backend/**'
      - 'apps/frontend/**'
      - 'package.json'
      - 'pnpm-lock.yaml'

jobs:
  # 前端测试
  frontend-test:
    name: 前端测试
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/iron'
      
      - name: 设置pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false
      
      - name: 获取pnpm存储目录
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: 缓存pnpm模块
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: 安装依赖
        run: pnpm install --frozen-lockfile
      
      - name: 运行前端测试
        run: pnpm test
  
  # 后端测试
  backend-test:
    name: 后端测试
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 设置Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: 安装后端依赖
        run: |
          cd apps/backend
          pip install -e .
          pip install pytest pytest-cov
      
      - name: 运行后端测试
        run: |
          cd apps/backend
          pytest -xvs
  
  # Docker构建测试
  docker-build-test:
    name: Docker构建测试
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 构建Docker镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: building-os:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: 验证镜像
        run: |
          # 列出构建的镜像
          docker images
          
          # 运行容器进行基本验证
          container_id=$(docker run -d -p 8000:8000 -p 80:80 building-os:test)
          
          # 等待容器启动
          echo "等待容器启动..."
          sleep 30
          
          # 检查容器是否运行
          docker ps
          
          # 检查容器日志
          docker logs $container_id
          
          # 检查后端API是否响应
          echo "检查后端API..."
          curl -f http://localhost:8000/docs || { echo "后端API检查失败"; docker logs $container_id; exit 1; }
          
          # 检查前端是否可访问
          echo "检查前端..."
          curl -f -L http://localhost || { echo "前端检查失败"; docker logs $container_id; exit 1; }
          
          # 停止并删除容器
          docker stop $container_id
          docker rm $container_id
      
      - name: 如果失败，显示容器日志
        if: failure()
        run: |
          if [ ! -z "$container_id" ]; then
            echo "容器日志:"
            docker logs $container_id
          fi
  
  # 安全扫描
  security-scan:
    name: Docker安全扫描
    runs-on: ubuntu-latest
    needs: docker-build-test
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 运行Trivy漏洞扫描
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '0'  # 不因为漏洞而失败构建
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
      
      - name: 运行Hadolint Dockerfile检查
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: true
      
      - name: 上传Hadolint结果
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: hadolint-results.sarif
          category: hadolint
  
  # 多环境测试
  multi-platform-test:
    name: 多平台构建测试
    runs-on: ubuntu-latest
    needs: docker-build-test
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 设置QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 多平台构建测试
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          tags: building-os:multi-platform
          cache-from: type=gha
          cache-to: type=gha,mode=max 